import groovy.json.JsonOutput

pipeline {
    agent any
    tools {
        nodejs "23.3.0"
    }
    environment {
        START_TIME = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
        MONGO_URI = 'mongodb://admin:pass@localhost:27017/' // Replace with your MongoDB URI
        DATABASE = 'jenkins-data'
        COLLECTION = 'build_logs'
        BUILD_DATA = ''
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Initialize ..."

                    // Initialize the JSON object to collect all data
                    def info = """{
                        "startTime": "${env.START_TIME}",
                        "commitInfo": [],
                        "files": [],
                        "buildDependencies": [],
                        "jobDetails": [],
                        "errorMessages": []
                    }"""
                    
                    BUILD_DATA = readJSON text: info
                    echo "Initial BUILD_DATA: ${groovy.json.JsonOutput.toJson(BUILD_DATA)}"
                }
            }
        }
        stage('Collect Git Information') {
            steps {
                // checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'e792e10b-7274-49ce-8f26-03a90d73ae18', url: 'https://github.com/ditchbyers/jenkins-test.git']])
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/ditchbyers/simple-node-app.git']])
                script {
                    // Get commit details
                    def commitDetails = sh(script: """
                        git log -1 --pretty=format:'%H;%an;%ad;%s' --date=iso-strict
                    """, returnStdout: true).trim().split(';')
                    def commitHash = commitDetails[0]
                    def author = commitDetails[1]
                    def date = commitDetails[2]
                    def message = commitDetails[3]

                    // Collect changed files
                    def changedFiles = sh(script: '''#!/bin/bash
                        git log -1 --numstat --pretty='' | while IFS=$'\\t' read -r added removed file
                        do
                            workspaceDir="${WORKSPACE}"
                            filePath="$workspaceDir/$file"

                            if [ -f "$filePath" ]; then
                                loc=$(awk 'BEGIN{c1=0} //{c1++} END{print c1}' "$filePath")
                            else
                                loc=0
                            fi
                            echo "{\\"file\\": \\"${file}\\", \\"added\\": ${added}, \\"removed\\": ${removed}, \\"loc\\": ${loc}},"
                        done
                    ''', returnStdout: true).trim()

                    echo "Changed Files 1: ${changedFiles}"

                    // Ensure the JSON format is correct
                    changedFiles = "[" + changedFiles.replaceAll(",\\s*\$", "") + "]"
                    echo "Changed Files 2: ${changedFiles}"

                    // Update buildData with commit info
                    
                    def commitInfo = """
                    {
                    "hash": "${commitHash}",
                    "author": "${author}",
                    "date": "${date}",
                    "message": "${message}",
                    "files": ${changedFiles}
                    }
                    """
                    
                    BUILD_DATA.commitInfo = readJSON text: commitInfo
                    echo "Updated Build data: ${groovy.json.JsonOutput.toJson(BUILD_DATA)}"
                    
                    def props = readJSON text: commitInfo
                    echo "Files data as JSON: ${groovy.json.JsonOutput.toJson(props)}"

                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo "Build ..."

                    checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/ditchbyers/simple-node-app.git']])

                    // Ensure npm is available
                    sh 'npm --version'  // Optional: Check if npm is correctly installed
                    
                    // Run npm install
                    sh 'npm install'
                    
                    //def dependencyTree = sh(script: 'npm ls --json --depth=Infinity', returnStdout: true).trim()
                    def dependencyTree = sh(script: 'npm ls --depth=Infinity', returnStdout: true).trim()

                    echo "Dependency Tree: ${dependencyTree}"
                }
            }
        }
    }
}
